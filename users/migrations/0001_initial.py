# Generated by Django 5.0.6 on 2025-05-30 09:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(help_text='Phone number for OTP verification', max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth for age verification', null=True)),
                ('pan_number', models.CharField(blank=True, help_text='PAN number for tax compliance', max_length=10, null=True, unique=True)),
                ('aadhar_number', models.CharField(blank=True, help_text='Aadhar number for identity verification', max_length=12, null=True, unique=True)),
                ('investor_category', models.CharField(choices=[('RETAIL', 'Retail Individual Investor (RII)'), ('HNI', 'High Net Worth Individual (HNI)'), ('QIB', 'Qualified Institutional Buyer (QIB)'), ('EMPLOYEE', 'Employee Category')], default='RETAIL', help_text='Investor category for IPO application', max_length=10)),
                ('bank_name', models.CharField(blank=True, help_text='Primary bank for ASBA', max_length=100, null=True)),
                ('bank_account_number', models.CharField(blank=True, help_text='Bank account number for transactions', max_length=20, null=True)),
                ('ifsc_code', models.CharField(blank=True, help_text='IFSC code of the bank branch', max_length=11, null=True)),
                ('demat_account_number', models.CharField(blank=True, help_text='Demat account for share allotment', max_length=20, null=True)),
                ('depository', models.CharField(blank=True, choices=[('NSDL', 'NSDL'), ('CDSL', 'CDSL')], help_text='Depository participant', max_length=10, null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='profile_pictures/')),
                ('is_kyc_verified', models.BooleanField(default=False, help_text='KYC verification status')),
                ('is_phone_verified', models.BooleanField(default=False, help_text='Phone number verification status')),
                ('is_email_verified', models.BooleanField(default=False, help_text='Email verification status')),
                ('address_line_1', models.CharField(blank=True, help_text='Address line 1', max_length=255, null=True)),
                ('address_line_2', models.CharField(blank=True, help_text='Address line 2', max_length=255, null=True)),
                ('city', models.CharField(blank=True, help_text='City', max_length=100, null=True)),
                ('state', models.CharField(blank=True, help_text='State', max_length=100, null=True)),
                ('pincode', models.CharField(blank=True, help_text='Postal code', max_length=6, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
