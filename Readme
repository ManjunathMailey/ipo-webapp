# IPO WebApp - Complete Full-Stack Application

## 🚀 Project Overview

A comprehensive Initial Public Offering (IPO) web application built with modern technologies. This platform allows users to browse, analyze, and apply for IPOs with a complete portfolio management system.

## 📋 Table of Contents

- [Features](#-features)
- [Technology Stack](#-technology-stack)
- [Installation](#-installation)
- [Usage](#-usage)
- [API Documentation](#-api-documentation)
- [Project Structure](#-project-structure)
- [Screenshots](#-screenshots)
- [Contributing](#-contributing)
- [License](#-license)

## ✨ Features

### Core Functionality
- **User Authentication**: Secure registration/login with JWT tokens
- **IPO Listings**: Browse and filter available IPOs
- **IPO Details**: Comprehensive IPO information pages
- **Application System**: Complete IPO application workflow
- **Portfolio Management**: Track investments and returns
- **Market Analytics**: Dashboard with insights and trends
- **Admin Panel**: Django admin for IPO management

### Advanced Features
- **Responsive Design**: Works seamlessly on all devices
- **Real-time Updates**: Dynamic data synchronization
- **Security**: CSRF protection, input validation, secure authentication
- **Professional UI/UX**: Modern design with Tailwind CSS
- **Interactive Components**: Charts, animations, and user feedback

## 🛠 Technology Stack

### Backend
- **Python 3.12.3**: Core programming language
- **Django 5.0.6**: Web framework
- **Django REST Framework 3.15.1**: API development
- **SQLite/PostgreSQL**: Database (configurable)
- **JWT Authentication**: Secure token-based auth

### Frontend
- **React.js**: Frontend library
- **Tailwind CSS**: Utility-first CSS framework
- **Axios**: HTTP client for API calls
- **Modern JavaScript**: ES6+ features

### Development Tools
- **Git**: Version control
- **VS Code**: Code editor
- **Postman**: API testing
- **Chrome DevTools**: Frontend debugging

## 📦 Installation

### Prerequisites
- Python 3.12.3
- Node.js (latest LTS)
- Git

### Backend Setup

1. **Clone the repository**
   ```bash
   git clone https://github.com/ManjunathMailey/ipo-webapp.git
   cd ipo-webapp
   ```

2. **Create virtual environment**
   ```bash
   python -m venv venv
   
   # On Windows
   venv\Scripts\activate
   
   # On macOS/Linux
   source venv/bin/activate
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

4. **Run migrations**
   ```bash
   python manage.py migrate
   ```

5. **Create superuser**
   ```bash
   python manage.py createsuperuser
   ```

6. **Add sample data**
   ```bash
   python manage.py shell
   # Copy and paste the sample IPO data from setup instructions
   ```

7. **Start Django server**
   ```bash
   python manage.py runserver
   ```

### Frontend Setup

1. **Navigate to frontend directory**
   ```bash
   cd frontend
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Start React development server**
   ```bash
   npm start
   ```

### Access the Application
- **Frontend**: http://localhost:3000
- **Backend API**: http://127.0.0.1:8000
- **Django Admin**: http://127.0.0.1:8000/admin

## 🎯 Usage

### For Investors

1. **Registration**: Create a new account with personal details
2. **Browse IPOs**: Explore available IPO listings
3. **IPO Details**: View comprehensive information about each IPO
4. **Apply**: Submit applications for open IPOs
5. **Portfolio**: Track your investments and returns
6. **Analytics**: View market trends and insights

### For Administrators

1. **Admin Panel**: Access Django admin at `/admin/`
2. **Manage IPOs**: Add, edit, and manage IPO listings
3. **User Management**: View and manage user accounts
4. **Application Tracking**: Monitor IPO applications

## 🔌 API Documentation

### Authentication Endpoints
```
POST /api/users/register/     - User registration
POST /api/users/login/        - User login
POST /api/users/logout/       - User logout
GET  /api/users/profile/      - Get user profile
PUT  /api/users/profile/      - Update user profile
```

### IPO Endpoints
```
GET  /api/ipos/               - List all IPOs
GET  /api/ipos/{id}/          - Get IPO details
GET  /api/ipos/categories/    - Get IPOs by category
GET  /api/ipos/statistics/    - Get market statistics
GET  /api/ipos/search/        - Search IPOs
```

### Application Endpoints
```
GET  /api/applications/       - List user applications
POST /api/applications/       - Create new application
GET  /api/applications/{id}/  - Get application details
PUT  /api/applications/{id}/  - Update application
POST /api/applications/{id}/cancel/ - Cancel application
```

### Sample API Request
```javascript
// Get all IPOs
fetch('http://127.0.0.1:8000/api/ipos/')
  .then(response => response.json())
  .then(data => console.log(data));

// Apply for IPO (authenticated)
fetch('http://127.0.0.1:8000/api/applications/', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer YOUR_JWT_TOKEN'
  },
  body: JSON.stringify({
    ipo: 1,
    quantity: 100,
    bid_price: 200.00,
    bank_name: 'HDFC Bank',
    bank_account_number: '12345678901',
    pan_number: 'ABCDE1234F',
    demat_account: '1234567890123456'
  })
});
```

## 📁 Project Structure

```
ipo-webapp/
├── backend/
│   ├── ipo_project/
│   │   ├── settings.py
│   │   ├── urls.py
│   │   └── wsgi.py
│   ├── users/
│   │   ├── models.py
│   │   ├── views.py
│   │   ├── serializers.py
│   │   ├── urls.py
│   │   └── admin.py
│   ├── ipos/
│   │   ├── models.py
│   │   ├── views.py
│   │   ├── serializers.py
│   │   ├── urls.py
│   │   └── admin.py
│   ├── applications/
│   │   ├── models.py
│   │   ├── views.py
│   │   ├── serializers.py
│   │   ├── urls.py
│   │   └── admin.py
│   ├── manage.py
│   └── requirements.txt
└── frontend/
    ├── src/
    │   ├── components/
    │   │   ├── AuthenticationApp.js
    │   │   ├── IPODetailApp.js
    │   │   └── AdminPortfolioApp.js
    │   ├── services/
    │   │   └── api.js
    │   ├── App.js
    │   └── index.css
    ├── public/
    ├── package.json
    └── tailwind.config.js
```

## 📸 Screenshots

### Homepage
![Homepage](screenshots/homepage.png)
*Modern landing page with gradient design and feature highlights*

### IPO Listings
![IPO Listings](screenshots/ipo-listings.png)
*Browse available IPOs with filtering and search capabilities*

### Portfolio Dashboard
![Portfolio](screenshots/portfolio.png)
*Comprehensive investment tracking and analytics*

### Authentication
![Login](screenshots/login.png)
*Secure login with professional UI design*

## 🎨 Key Features Showcase

### Responsive Design
- Mobile-first approach
- Tailwind CSS for consistent styling
- Cross-browser compatibility

### Security Features
- JWT-based authentication
- CSRF protection
- Input validation and sanitization
- Secure password handling

### User Experience
- Intuitive navigation
- Real-time feedback
- Loading states and error handling
- Professional animations and transitions

### Data Management
- RESTful API design
- Efficient database queries
- Data validation and integrity
- Scalable architecture

## 🔧 Configuration

### Environment Variables
Create a `.env` file for production:
```
SECRET_KEY=your-secret-key
DEBUG=False
DATABASE_URL=your-database-url
ALLOWED_HOSTS=your-domain.com
```

### Database Configuration
For PostgreSQL (production):
```python
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ipo_webapp_db',
        'USER': 'your_db_user',
        'PASSWORD': 'your_db_password',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
```

## 🚀 Deployment

### Django (Backend)
1. Configure production settings
2. Collect static files: `python manage.py collectstatic`
3. Deploy to Heroku, AWS, or preferred platform

### React (Frontend)
1. Build for production: `npm run build`
2. Deploy to Netlify, Vercel, or preferred platform

## 🧪 Testing

### Backend Testing
```bash
python manage.py test
```

### Frontend Testing
```bash
npm test
```

### API Testing with Postman
1. Import the provided Postman collection
2. Test all endpoints with sample data
3. Verify authentication flows

## 📊 Performance

- **Backend**: Django REST Framework provides efficient API responses
- **Frontend**: React with optimized components and lazy loading
- **Database**: Proper indexing and query optimization
- **Caching**: Ready for Redis integration

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature-name`
3. Make changes and commit: `git commit -am 'Add feature'`
4. Push to branch: `git push origin feature-name`
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 👨‍💻 Author

- Manjunath Mailey
- Email: manjunathroyalgimail@gmail.com
- LinkedIn: https://www.linkedin.com/in/manjunath-mailey-0844a5230/
- GitHub: https://github.com/ManjunathMailey

## 🙏 Acknowledgments

- Django and React communities for excellent documentation
- Tailwind CSS for the utility-first CSS framework
- All open-source contributors who made this project possible

## 📞 Support

For support, email manjunathroyalgimail@gmail.com or create an issue in the GitHub repository.

---

**Built with ❤️ for learning and professional development**
